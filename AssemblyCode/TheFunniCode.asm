; THIS PROGRAM CALCULATES THE MINIMUM, MAXIMUM, AND AVERAGE OF FIVE SCORES.
; IT THEN DISPLAYS THESE CALCULATED VALUES ALONG WITH AN EQUIVALENT LETTER GRADE FOR EACH SCORE.

.ORIG x3000

START_MAIN

    LEA R0, INPUT_PROMPT_MSG
    PUTS
    INPUT_PROMPT_MSG .STRINGZ "Please enter 5 scores (each between 0 and 99):"

    LD R0, NEWLINE_CONST_VAL
    OUT

    JSR GET_NUMERIC_INPUT_RTN
    LEA R6, SCORE_DATA_ARRAY
    STR R3, R6, #0
    JSR DETERMINE_LETTER_GRADE_RTN
    JSR STACK_POP_OP_RTN

    LD R0, NEWLINE_CONST_VAL
    OUT

    JSR GET_NUMERIC_INPUT_RTN
    LEA R6, SCORE_DATA_ARRAY
    STR R3, R6, #1
    JSR DETERMINE_LETTER_GRADE_RTN
    JSR STACK_POP_OP_RTN

    LD R0, NEWLINE_CONST_VAL
    OUT

    JSR GET_NUMERIC_INPUT_RTN
    LEA R6, SCORE_DATA_ARRAY
    STR R3, R6, #2
    JSR DETERMINE_LETTER_GRADE_RTN
    JSR STACK_POP_OP_RTN

    LD R0, NEWLINE_CONST_VAL
    OUT

    JSR GET_NUMERIC_INPUT_RTN
    LEA R6, SCORE_DATA_ARRAY
    STR R3, R6, #3
    JSR DETERMINE_LETTER_GRADE_RTN
    JSR STACK_POP_OP_RTN

    LD R0, NEWLINE_CONST_VAL
    OUT

    JSR GET_NUMERIC_INPUT_RTN
    LEA R6, SCORE_DATA_ARRAY
    STR R3, R6, #4
    JSR DETERMINE_LETTER_GRADE_RTN
    JSR STACK_POP_OP_RTN

    LD R0, NEWLINE_CONST_VAL
    OUT

;--- CALCULATE AND DISPLAY MAXIMUM SCORE ---;
FIND_MAXIMUM_SCORE
    LD R1, TOTAL_SCORES_VAL
    LEA R2, SCORE_DATA_ARRAY
    LD R4, SCORE_DATA_ARRAY
    ST R4, MAX_SCORE_RESULT
    ADD R2, R2, #1

MAX_CHECK_LOOP
    LDR R5, R2, #0
    NOT R4, R4
    ADD R4, R4, #1
    ADD R5, R5, R4
    BRp UPDATE_MAX_AND_CONTINUE
    LEA R0, MAX_OUTPUT_LABEL
    PUTS
    LD R3, MAX_SCORE_RESULT
    AND R1, R1, #0
    JSR DISPLAY_NUMBER_RTN
    LD R0, SPACE_CONST_VAL
    OUT

    LD R0, NEWLINE_CONST_VAL
    OUT
    JSR WIPE_GP_REGISTERS_RTN

;--- CALCULATE AND DISPLAY MINIMUM SCORE ---;
FIND_MINIMUM_SCORE
    LD R1, TOTAL_SCORES_VAL
    LEA R2, SCORE_DATA_ARRAY
    LD R4, SCORE_DATA_ARRAY
    ST R4, MIN_SCORE_RESULT
    ADD R2, R2, #1
    ADD R1, R1, #-1

MIN_CHECK_LOOP
    LDR R5, R2, #0
    NOT R4, R4
    ADD R4, R4, #1
    ADD R5, R5, R4
    BRn UPDATE_MIN_AND_CONTINUE

    ADD R2, R2, #1
    LD R4, SCORE_DATA_ARRAY
    AND R5, R5, #0
    ADD R1, R1, #-1
    BRp MIN_CHECK_LOOP

    LEA R0, MIN_OUTPUT_LABEL
    PUTS
    LD R3, MIN_SCORE_RESULT
    AND R1, R1, #0
    JSR DISPLAY_NUMBER_RTN
    LD R0, SPACE_CONST_VAL
    OUT

    JSR WIPE_GP_REGISTERS_RTN
    LD R0, NEWLINE_CONST_VAL
    OUT

;--- CALCULATE AND DISPLAY AVERAGE SCORE ---;
CALCULATE_AVERAGE_SCORE
    LD R1, TOTAL_SCORES_VAL
    LEA R2, SCORE_DATA_ARRAY
    AND R3, R3, #0

SUM_ALL_SCORES_LOOP
    LDR R4, R2, #0
    ADD R3, R3, R4
    ADD R2, R2, #1
    ADD R1, R1, #-1
    BRp SUM_ALL_SCORES_LOOP

    LD R1, TOTAL_SCORES_VAL
    NOT R1, R1
    ADD R1, R1, #1
    ADD R4, R3, #0
    AND R6, R6, #0

AVERAGE_DIVISION_LOOP
    ADD R4, R4, #0
    BRnz AVERAGE_CALCULATION_ENDED
    ADD R6, R6, #1
    ADD R4, R4, R1
    BRp AVERAGE_DIVISION_LOOP

AVERAGE_CALCULATION_ENDED
    ST R6, FINAL_AVERAGE_SCORE
    LEA R0, AVG_OUTPUT_LABEL
    PUTS
    AND R3, R3, #0
    AND R1, R1, #0
    AND R4, R4, #0
    ADD R3, R3, R6
    JSR DISPLAY_NUMBER_RTN
    HALT

;------- GLOBAL VARIABLES --------;

NEWLINE_CONST_VAL .FILL xA
SPACE_CONST_VAL .FILL x20
ASCII_TO_NUM_CONV_OFFSET .FILL #-48
NUM_TO_ASCII_CONV_OFFSET .FILL #48
UNUSED_ASCII_NEG_30_CONST .FILL #-30
TOTAL_SCORES_VAL .FILL 5
MAX_SCORE_RESULT .BLKW 1
MIN_SCORE_RESULT .BLKW 1
UNUSED_AVG_LABEL_MEM .BLKW 1
FINAL_AVERAGE_SCORE .BLKW 1

UPDATE_MIN_AND_CONTINUE
    LDR R4, R2, #0
    ST R4, MIN_SCORE_RESULT
    ADD R2, R2, #1
    ADD R1, R1, #-1
    BRnzp MIN_CHECK_LOOP

UPDATE_MAX_AND_CONTINUE
    LDR R4, R2, #0
    ST R4, MAX_SCORE_RESULT
    ADD R2, R2, #1
    ADD R1, R1, #-1
    BRp MAX_CHECK_LOOP

SCORE_DATA_ARRAY .BLKW 5

MIN_OUTPUT_LABEL .STRINGZ "MINIMUM SCORE: "
MAX_OUTPUT_LABEL .STRINGZ "MAXIMUM SCORE: "
AVG_OUTPUT_LABEL .STRINGZ "AVERAGE SCORE: "

ASCII_Y_LOWER_NEG_CONST .FILL xFF87
ASCII_Y_UPPER_NEG_CONST .FILL xFFA7
PROGRAM_START_ADDR_CONST .FILL x3000

GEN_SAVE_SLOT_1 .FILL X0
GEN_SAVE_SLOT_2 .FILL X0
GEN_SAVE_SLOT_3 .FILL X0
GEN_SAVE_SLOT_4 .FILL X0
GEN_SAVE_SLOT_5 .FILL X0

;--- GET NUMERIC SCORE SUBROUTINE --;
GET_NUMERIC_INPUT_RTN
    ST R7, GEN_SAVE_SLOT_1
    JSR WIPE_GP_REGISTERS_RTN
    LD R4, ASCII_TO_NUM_CONV_OFFSET

    GETC
    JSR VALIDATE_CHAR_INPUT_RTN
    OUT

    ADD R1, R0, #0
    ADD R1, R1, R4
    ADD R2, R2, #10

MULTIPLY_TENS_DIGIT_LOOP
    ADD R3, R3, R1
    ADD R2, R2, #-1
    BRp MULTIPLY_TENS_DIGIT_LOOP

    GETC
    JSR VALIDATE_CHAR_INPUT_RTN
    OUT

    ADD R0, R0, R4
    ADD R3, R3, R0

    LD R0, SPACE_CONST_VAL
    OUT

    LD R7, GEN_SAVE_SLOT_1
    RET

;-- DISPLAY TWO-DIGIT SUBROUTINE -;
DISPLAY_NUMBER_RTN
    ST R7, GEN_SAVE_SLOT_1
    LD R5, NUM_TO_ASCII_CONV_OFFSET
    ADD R4, R3, #0
    AND R1, R1, #0

CALC_TENS_DIGIT_LOOP
    ADD R1, R1, #1
    ADD R4, R4, #-10
    BRp CALC_TENS_DIGIT_LOOP

    ADD R1, R1, #-1
    ADD R4, R4, #10

    ADD R6, R4, #-10
    BRnp REMAINDER_ADJUSTED

REMAINDER_NEEDS_ADJUST
    ADD R1, R1, #1
    ADD R4, R4, #-10

REMAINDER_ADJUSTED
    ST R1, TEMP_QUOTIENT_MEM
    ST R4, TEMP_REMAINDER_MEM

    LD R0, TEMP_QUOTIENT_MEM
    ADD R0, R0, R5
    OUT
    LD R0, TEMP_REMAINDER_MEM
    ADD R0, R0, R5
    OUT

    LD R7, GEN_SAVE_SLOT_1
    RET

TEMP_REMAINDER_MEM .FILL X0
TEMP_QUOTIENT_MEM .FILL X0

;------ STACK PUSH SUBROUTINE ----;
STACK_PUSH_OP_RTN
    ST R7, GEN_SAVE_SLOT_2
    LD R6, STACK_POINTER_MEM_LOC
    ADD R6, R6, #0
    BRnz STACK_OPERATION_ERROR

    ADD R6, R6, #-1
    STR R0, R6, #0
    ST R6, STACK_POINTER_MEM_LOC
    LD R7, GEN_SAVE_SLOT_2
    RET

STACK_POINTER_MEM_LOC .FILL X4000

;------ STACK POP SUBROUTINE -----;
STACK_POP_OP_RTN
    LD R6, STACK_POINTER_MEM_LOC
    ST R1, GEN_SAVE_SLOT_5
    LD R1, STACK_BOTTOM_LIMIT_NEG
    ADD R1, R1, R6
    BRzp STACK_OPERATION_ERROR
    LD R1, GEN_SAVE_SLOT_5

    LDR R0, R6, #0
    ST R7, GEN_SAVE_SLOT_4

    OUT
    LD R0, SPACE_CONST_VAL
    OUT

    ADD R6, R6, #1
    ST R6, STACK_POINTER_MEM_LOC
    LD R7, GEN_SAVE_SLOT_4
    RET

STACK_OPERATION_ERROR
    LEA R0, STACK_FAILURE_MSG
    PUTS
    HALT

STACK_BOTTOM_LIMIT_NEG .FILL xC000
STACK_FAILURE_MSG .STRINGZ "CRITICAL STACK FAULT (Overflow/Underflow). Program terminated."

;--- GET LETTER GRADE SUBROUTINE -;
DETERMINE_LETTER_GRADE_RTN
    AND R2, R2, #0

CHECK_FOR_A
    LD R0, GRADE_A_MIN_NEG
    LD R1, ASCII_CHAR_A
    ADD R2, R3, R0
    BRzp STORE_LETTER_AND_PUSH_RTN

CHECK_FOR_B
    AND R2, R2, #0
    LD R0, GRADE_B_MIN_NEG
    LD R1, ASCII_CHAR_B
    ADD R2, R3, R0
    BRzp STORE_LETTER_AND_PUSH_RTN

CHECK_FOR_C
    AND R2, R2, #0
    LD R0, GRADE_C_MIN_NEG
    LD R1, ASCII_CHAR_C
    ADD R2, R3, R0
    BRzp STORE_LETTER_AND_PUSH_RTN

CHECK_FOR_D
    AND R2, R2, #0
    LD R0, GRADE_D_MIN_NEG
    LD R1, ASCII_CHAR_D
    ADD R2, R3, R0
    BRzp STORE_LETTER_AND_PUSH_RTN

ASSIGN_F_GRADE_DEFAULT
    AND R2, R2, #0
    LD R0, GRADE_F_MIN_NEG
    LD R1, ASCII_CHAR_F
    ADD R2, R3, R0
    BRnzp STORE_LETTER_AND_PUSH_RTN

    RET

STORE_LETTER_AND_PUSH_RTN
    ST R7, GEN_SAVE_SLOT_1
    AND R0, R0, #0
    ADD R0, R1, #0
    JSR STACK_PUSH_OP_RTN
    LD R7, GEN_SAVE_SLOT_1
    RET

GRADE_A_MIN_NEG .FILL #-90
ASCII_CHAR_A .FILL X41
GRADE_B_MIN_NEG .FILL #-80
ASCII_CHAR_B .FILL X42
GRADE_C_MIN_NEG .FILL #-70
ASCII_CHAR_C .FILL X43
GRADE_D_MIN_NEG .FILL #-60
ASCII_CHAR_D .FILL X44
GRADE_F_MIN_NEG .FILL #-50
ASCII_CHAR_F .FILL X46

;--- CLEAR REGISTERS SUBROUTINE --;
WIPE_GP_REGISTERS_RTN
    AND R1, R1, #0
    AND R2, R2, #0
    AND R3, R3, #0
    AND R4, R4, #0
    AND R5, R5, #0
    AND R6, R6, #0
    RET

;--- VALIDATE INPUT SUBROUTINE ---;
VALIDATE_CHAR_INPUT_RTN
    ST R1, GEN_SAVE_SLOT_5
    ST R2, GEN_SAVE_SLOT_4
    ST R3, GEN_SAVE_SLOT_3

    LD R1, MIN_VALID_DIGIT_NEG_ASCII
    ADD R2, R0, R1
    BRn INPUT_VALIDATION_FAILURE

    LD R1, MAX_VALID_DIGIT_NEG_ASCII
    ADD R3, R0, R1
    BRp INPUT_VALIDATION_FAILURE

    LD R1, GEN_SAVE_SLOT_5
    LD R2, GEN_SAVE_SLOT_4
    LD R3, GEN_SAVE_SLOT_3
    RET

INPUT_VALIDATION_FAILURE
    LEA R0, INVALID_CHAR_ERROR_MSG
    PUTS
    LD R0, NEWLINE_FOR_VALIDATION_ERR
    OUT
    LD R7, MAIN_PROGRAM_START_ADDR
    JMP R7

INVALID_CHAR_ERROR_MSG .STRINGZ "ERROR: Invalid character entered. Restarting input process..."
MAIN_PROGRAM_START_ADDR .FILL X3000
MIN_VALID_DIGIT_NEG_ASCII .FILL #-48
MAX_VALID_DIGIT_NEG_ASCII .FILL #-57
NEWLINE_FOR_VALIDATION_ERR .FILL XA

.END
